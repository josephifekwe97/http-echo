DevOps Engineer Assessment Documentation

Project Title: Interswitch - INTERNAL DevOps Engineer Assessment

Introduction:

Welcome to the documentation for the Interswitch DevOps Engineer Assessment. In this document, we'll walk through the architecture design, infrastructure deployment, CI/CD pipelines setup, and monitoring/logging configuration for the http-echo application.

Architecture Design:

We've crafted a robust architecture to ensure the reliability, security, and scalability of the http-echo application. Here's a brief overview:

VPC (Virtual Private Cloud): We've set up a VPC named 'my-vpc02' in the Oregon region with a clever arrangement of two public and two private subnets spread across two availability zones (AZs). This setup boosts fault tolerance and availability.

Internet Gateway: To facilitate communication with the internet from the public subnets, we've attached an internet gateway to the VPC.

Route Tables: Efficient routing is key, so we've configured route tables to direct traffic between the subnets and the internet. Public subnets are associated with a route table containing a route to the internet gateway, while private subnets have their own route tables associated with NAT gateways for outbound internet access.

ECS (Elastic Container Service) Cluster: Managing containerized applications is a breeze with ECS. We've created a cluster to handle the http-echo application, ensuring scalability and simplified infrastructure management.

Task Definitions: Task definitions provide a blueprint for container configurations and resource requirements for the http-echo application, making deployment straightforward and consistent.

Service Definition: To deploy the http-echo application as a service within the ECS cluster, we've crafted a service definition file. This file includes specifications for desired replica count, VPC configuration, security groups, and load balancer setup.

Reasons for Choosing What You Chose:

We selected AWS for its comprehensive suite of services, robust security features, and extensive documentation and community support. ECS was chosen for its seamless integration with other AWS services and its ability to manage containerized applications effectively.

Infrastructure Deployment:

We've embraced Infrastructure as Code (IaC) principles to automate infrastructure deployment. Here's an overview of the steps involved:

We utilize AWS CloudFormation or Terraform to orchestrate the creation of VPC, subnets, internet gateway, and route tables.
The ECS cluster and task definitions are configured to ensure seamless deployment and management of the http-echo application.
Service configurations are defined to facilitate smooth deployment within the ECS environment.
How to Use the Scripts to Set up/Run What You've Designed in Your Own Environment:

To set up and run the infrastructure in your own environment, follow these steps:

Set the cloud provider credentials (app key and secret).
Run Terraform init to initialize the project.
Run Terraform plan to preview the changes that will be applied.
Run Terraform apply to apply the changes and provision the infrastructure.
CI/CD Pipelines:

Automation is the name of the game when it comes to CI/CD pipelines. Here's what our pipeline encompasses:

Build and Unit Testing: We kick things off by building the source code and running unit tests to maintain code quality.
Scans & Checks: Static code analysis, security scans, and dependency checks are performed to identify and rectify vulnerabilities.
Deployment to Staging Environment: The application is deployed to a staging environment for thorough testing and validation.
Deployment to Production Environment: Following an automated or manual approval process, the application is deployed to the production environment, ensuring a seamless transition.
How to Test the Application and Deployment:

To test the application and deployment, follow these steps:

Access the deployed application URL in your web browser.
Send HTTP requests to the application and verify the responses.
Monitor the application logs and infrastructure metrics for any anomalies or errors.
Monitoring and Logging:

Monitoring and logging play a pivotal role in ensuring the health and performance of the infrastructure and applications. Here's how we've set things up:

Application Logs: We diligently collect and store logs generated by the http-echo application for in-depth analysis.
Infrastructure Metrics: We keep a close eye on metrics such as CPU usage, memory usage, and network traffic to detect anomalies and optimize resource utilization.
Alerts for Critical Events: Alerts are configured to promptly notify relevant stakeholders in the event of critical events or performance issues.
Any Improvements That You Would Like to Make:

While the current setup is robust, there's always room for improvement. Some potential areas for enhancement include:

Implementing autoscaling for ECS services to dynamically adjust capacity based on traffic.
Enhancing security by implementing encryption for data at rest and implementing stricter IAM policies.
Improving monitoring and alerting configurations to proactively identify and address issues.
How to Run the Code on a Different Environment:

To run the code on a different environment, follow these steps:

Set the cloud provider credentials (app key and secret).
Run Terraform init to initialize the project.
Run Terraform plan to preview the changes that will be applied.
Run Terraform apply to apply the changes and provision the infrastructure.
Access the deployed application URL in your web browser to view the application.
For access to the code repository and demo environment, please refer to the provided links.

Repositority Link: 
Application url :